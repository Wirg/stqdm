name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # TODO: refactor build when https://github.community/t5/GitHub-Actions/reusing-sharing-inheriting-steps-between-jobs-declarations/td-p/37849
  build-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
        tqdm-version: [ "==4.50.0", "==4.62.3", "@latest" ]
        streamlit-version: [ "==0.66.0", "==1.1.0", "@latest" ]
        poetry-version: ["1.1.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.1.10 python -
          python -m venv ~/.venv
          poetry config virtualenvs.create false
      - name: Cache Venv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-
      - name: Add specific build dependencies
        run: |
          poetry add --lock tqdm${{ matrix.tqdm-version }} streamlit${{ matrix.streamlit-version }}
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: |
          source ~/.venv/bin/activate
          poetry install
          poetry run pip freeze
        if: steps.cache.outputs.cache-hit != 'true'

  flake8:
    runs-on: ubuntu-latest
    needs: build-dependencies
    strategy:
      matrix:
        python-version: [3.7, 3.9]
        tqdm-version: ["==4.50.0", "@latest"]
        streamlit-version: ["==0.66.0", "@latest"]
        poetry-version: [ "1.1.10" ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Venv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
      - name: Lint with flake8
        run: |
          source ~/.venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --statistics

  test:
    runs-on: ubuntu-latest
    needs: build-dependencies
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
        tqdm-version: [ "==4.50.0", "==4.62.3", "@latest" ]
        streamlit-version: [ "==0.66.0", "==1.1.0", "@latest" ]
        poetry-version: [ "1.1.10" ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Venv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
      - name: Test with pytest
        run: |
          source ~/.venv/bin/activate
          pytest --cov-report xml:codecov.xml
      - name: Codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }}

  black:
    runs-on: ubuntu-latest
    needs: build-dependencies
    strategy:
      matrix:
        python-version: [3.9]
        tqdm-version: ["@latest"]
        streamlit-version: ["@latest"]
        poetry-version: [ "1.1.10" ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Venv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ matrix.poetry-version }}-${{ hashFiles('**/poetry.lock') }}-tqdm-${{ matrix.tqdm-version }}-streamlit-${{ matrix.streamlit-version }}
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Lint with Black
        run: |
          source ~/.venv/bin/activate
          black . --check
